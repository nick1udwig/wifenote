interface wifenote {
    /// Structure for a folder
    record folder {
        id: string,
        name: string,
        parent-id: option<string>,
    }

    /// Type of note
    enum note-type {
        tldraw,
        markdown,
    }

    /// Structure for a note
    record note {
        id: string,
        name: string,
        folder-id: option<string>,
        note-type: note-type,
        content: list<u8>,  // serialized tldraw state or markdown text
        is-public: bool,
        collaborators: list<string>,  // list of collaborating node IDs
    }

    /// Structure for a collaboration invite
    record invite {
        note-id: string,
        inviter-node-id: string,
        note-name: string,
    }

    /// Compressed export data
    type compressed-bytes = list<u8>;

    variant request {
        /// Folder operations
        create-folder(tuple<string, option<string>>),  // (folder name, parent id)
        rename-folder(tuple<string, string>),  // (folder id, new name)
        delete-folder(string),  // folder id
        move-folder(tuple<string, option<string>>), // (folder id, new parent id)

        /// Note operations
        create-note(tuple<string, option<string>, note-type>),  // (note name, folder id, note type)
        rename-note(tuple<string, string>),  // (note id, new name)
        delete-note(string),  // note id
        move-note(tuple<string, option<string>>),  // (note id, new folder id)
        get-note(string),  // note id
        update-note-content(tuple<string, list<u8>>),  // (note id, new content)

        /// Tree operations
        get-structure,  // get full folder/note tree
        export-all,  // get all data for export
        import-all(compressed-bytes),  // import compressed data

        /// Note sharing operations
        set-note-public(tuple<string, bool>),  // (note id, is public)
        invite-collaborator(tuple<string, string>),  // (note id, node id)
        remove-collaborator(tuple<string, string>),  // (note id, node id)
        accept-invite(tuple<string, string>),  // (note id, inviter node id)
        reject-invite(tuple<string, string>),  // (note id, inviter node id)
        get-invites,  // returns list of pending invites
    }

    variant response {
        /// Folder responses
        create-folder(result<folder, string>),
        rename-folder(result<folder, string>),
        delete-folder(result<_, string>),
        move-folder(result<folder, string>),

        /// Note responses
        create-note(result<note, string>),
        rename-note(result<note, string>),
        delete-note(result<_, string>),
        move-note(result<note, string>),
        get-note(result<note, string>),
        update-note-content(result<_, string>),

        /// Tree responses
        get-structure(result<tuple<list<folder>, list<note>>, string>),
        export-all(result<compressed-bytes, string>),
        import-all(result<_, string>),

        /// Note sharing responses
        set-note-public(result<note, string>),
        invite-collaborator(result<note, string>),
        remove-collaborator(result<note, string>),
        accept-invite(result<note, string>),
        reject-invite(result<_, string>),
        get-invites(result<list<invite>, string>),
    }
}

world wifenote-nick-dot-kino-v0 {
    import wifenote;
    include process-v1;
}